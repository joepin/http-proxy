Part 1
- Handle HTTP/1.0 GET requests
	- Validate HTTP requests
		- Check if GET, POST, etc.
		- (Not required to handle multiline specific fields)
		- Headers: 
			- Host = hostname
			- User-Agent = Mozilla 
			- Connection = close (always)
			- Proxy-Connection = close (always)
			- Additional headers should be forwarded unchanged
		- Ports:
			- Default = 80
			- Or will be given in request
	- Parse request into hostname and path
	- Send HTTP 1.0 ALWAYS
- Read HTTP responses

Part 2
- Handle multiple requests
	- Spawn a new thread on each request
		- Run each in detached mode
		- "open_clientfd", "open_listenfd", "getaddrinfo" are thread safe
		- Wrappers for threads included in tiny.c

Part 3
- Store 3 most popular objects and other recently used Web objects
	- When receiving a web object from the server, cache it in memory
		- If included in another request, use cache
	- Store URLs (will be <= 2000 chars)
	- Allocate cache object whenever receiving data from the server
		- If size exceeds, drop memory
	- 1000 requests, 1000 objects
	- MAX_CACHE_SIZE = 1 MiB (1049000)
	- MAX_OBJECT_SIZE = 100 KiB (102400)
	- Eviction policy:
		- Least-Frequent-Recently-Used
			- Combination of least-frequently-used and least-recently-used
				- LFU - size 3
				- LRU - size 997
				- Don't need to add file to LRU if it is in LFU
				- When adding file to LFU:
					- Wait until we have a new element which has a higher frequency than the minimum element of LFU (easier to handle ties)
					- Can ignore its existence in LRU
				- Slot size should be dynamic
				- "Just use another structure that keeps count of all the files"
			- Concurrent access